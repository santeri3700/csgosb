#!/bin/bash
# @author santeri3700 aka LuomuBanaani
version=2.0
servernumberinput=$2

printf "CSGOSB v$version by LuomuBanaani\n"

if [ "$EUID" -ne 0 ]
  then echo "Note: (un)blocking server(s) require superuser access."
fi

source ipvars

read -a eu_north_sep <<< "${eu_north}"
read -a eu_east_sep <<< "${eu_east}"
read -a eu_west_sep <<< "${eu_west}"
read -a eu_poland_sep <<< "${eu_poland}"
read -a us_east_sep <<< "${us_east}"
read -a us_southeast_sep <<< "${us_southeast}"
read -a us_west_sep <<< "${us_west}"
read -a us_southwest_sep <<< "${us_southwest}"
read -a us_south_sep <<< "${us_south}"
read -a mid_east_sep <<< "${mid_east}"
read -a asia_southeast_sep <<< "${asia_southeast}"
read -a afri_south_sep <<< "${afri_south}"
read -a australia_sep <<< "${australia}"
read -a india_sep <<< "${india}"
read -a japan_sep <<< "${japan}"
read -a singa_sep <<< "${singa}"
read -a hk_sep <<< "${hk}"

function blockrange {
    for i in "$@"; do
      sudo iptables -A INPUT -s $i -j DROP && printf "Blocked IP: $i\n"
    done
    printf "IP's blocked!\n"
}

function unblockrange {
    for i in "$@"; do
      sudo iptables -C INPUT -s $i -j DROP &> /dev/null #Check if UNblocked -> 0 == blocked
      while [ $? == 0 ]; do
          sudo iptables -D INPUT -s $i -j DROP &> /dev/null
          printf "Unblocked IP: $i\n";
          sudo iptables -C INPUT -s $i -j DROP &> /dev/null
      done
    done
    printf "IP's unblocked!\n"
}

function block {
    case $servernumberinput in
        1) blockrange ${eu_north_sep[@]};;
        2) blockrange ${eu_east_sep[@]};;
        3) blockrange ${eu_west_sep[@]};;
        4) blockrange ${eu_poland_sep[@]};;
        5) blockrange ${us_east_sep[@]};;
        6) blockrange ${us_southeast_sep[@]};;
        7) blockrange ${us_west_sep[@]};;
        8) blockrange ${us_southwest_sep[@]};;
        9) blockrange ${us_south_sep[@]};;
        10) blockrange ${mid_east_sep[@]};;
        11) blockrange ${asia_southeast_sep[@]};;
        12) blockrange ${afri_south_sep[@]};;
        13) blockrange ${australia_sep[@]};;
        14) blockrange ${india_sep[@]};;
        15) blockrange ${japan_sep[@]};;
        16) blockrange ${singa_sep[@]};;
        17) blockrange ${hk_sep[@]};;
        all) blockrange ${eu_north_sep[@]};
             blockrange ${eu_east_sep[@]};
             blockrange ${eu_west_sep[@]};
             blockrange ${eu_poland_sep[@]};
             blockrange ${us_east_sep[@]};
             blockrange ${us_southeast_sep[@]};
             blockrange ${us_west_sep[@]};
             blockrange ${us_southwest_sep[@]};
             blockrange ${us_south_sep[@]};
             blockrange ${mid_east_sep[@]};
             blockrange ${asia_southeast_sep[@]};
             blockrange ${afri_south_sep[@]};
             blockrange ${australia_sep[@]};
             blockrange ${india_sep[@]};
             blockrange ${japan_sep[@]};
             blockrange ${singa_sep[@]};
             blockrange ${hk_sep[@]};;
        1337) printf "Wow, such 'leet'.\n";;
        *) printf "Invalid server number! ($servernumberinput)\n";;
    esac
}

function unblock {
    case $servernumberinput in
        1) unblockrange ${eu_north_sep[@]};;
        2) unblockrange ${eu_east_sep[@]};;
        3) unblockrange ${eu_west_sep[@]};;
        4) unblockrange ${eu_poland_sep[@]};;
        5) unblockrange ${us_east_sep[@]};;
        6) unblockrange ${us_southeast_sep[@]};;
        7) unblockrange ${us_west_sep[@]};;
        8) unblockrange ${us_southwest_sep[@]};;
        9) unblockrange ${us_south_sep[@]};;
        10) unblockrange ${mid_east_sep[@]};;
        11) unblockrange ${asia_southeast_sep[@]};;
        12) unblockrange ${afri_south_sep[@]};;
        13) unblockrange ${australia_sep[@]};;
        14) unblockrange ${india_sep[@]};;
        15) unblockrange ${japan_sep[@]};;
        16) unblockrange ${singa_sep[@]};;
        17) unblockrange ${hk_sep[@]};;
        all) unblockrange ${eu_north_sep[@]};
             unblockrange ${eu_east_sep[@]};
             unblockrange ${eu_west_sep[@]};
             unblockrange ${eu_poland_sep[@]};
             unblockrange ${us_east_sep[@]};
             unblockrange ${us_southeast_sep[@]};
             unblockrange ${us_west_sep[@]};
             unblockrange ${us_southwest_sep[@]};
             unblockrange ${us_south_sep[@]};
             unblockrange ${mid_east_sep[@]};
             unblockrange ${asia_southeast_sep[@]};
             unblockrange ${afri_south_sep[@]};
             unblockrange ${australia_sep[@]};
             unblockrange ${india_sep[@]};
             unblockrange ${japan_sep[@]};
             unblockrange ${singa_sep[@]};
             unblockrange ${hk_sep[@]};;
        *) printf "Invalid server number! ($servernumberinput)\n";;
    esac
}

function getping {
    pingnum=$(ping -i 0.2 -c 3 -s 16 ${1} | tail -1| awk '{print $4}' | cut -d '/' -f 2;)
    if [ -z $pingnum ]; then
        printf "Blocked / Offline\n"
    else
        printf "$pingnum - ms\n"
    fi
}

function pingserver {
    printf "Pinging server(s)\n"
    case $servernumberinput in
        1) printf "Server 1: "; getping $main_eu_north;;
        2) printf "Server 2: "; getping $main_eu_east;;
        3) printf "Server 3: "; getping $main_eu_west;;
        4) printf "Server 4: "; getping $main_eu_poland;;
        5) printf "Server 5: "; getping $main_us_east;;
        6) printf "Server 6: "; getping $main_us_southeast;;
        7) printf "Server 7: "; getping $main_us_west;;
        8) printf "Server 8: "; getping $main_us_southwest;;
        9) printf "Server 9: "; getping $main_us_south;;
        10) printf "Server 10: "; getping $main_mid_east;;
        11) printf "Server 11: "; getping $main_asia_southeast;;
        12) printf "Server 12: "; getping $main_afri_south;;
        13) printf "Server 13: "; getping $main_australia;;
        14) printf "Server 14: "; getping $main_india;;
        15) printf "Server 15: "; getping $main_japan;;
        16) printf "Server 16: "; getping $main_singa;;
        17) printf "Server 17: "; getping $main_hk;;
        all) printf "Server 1: "; getping $main_eu_north;
             printf "Server 2: "; getping $main_eu_east;
             printf "Server 3: "; getping $main_eu_west;
             printf "Server 4: "; getping $main_eu_poland;
             printf "Server 5: "; getping $main_us_east;
             printf "Server 6: "; getping $main_us_southeast;
             printf "Server 7: "; getping $main_us_west;
             printf "Server 8: "; getping $main_us_southwest;
             printf "Server 9: "; getping $main_us_south;
             printf "Server 10: "; getping $main_mid_east;
             printf "Server 11: "; getping $main_asia_southeast;
             printf "Server 12: "; getping $main_afri_south;
             printf "Server 13: "; getping $main_australia;
             printf "Server 14: "; getping $main_india;
             printf "Server 15: "; getping $main_japan;
             printf "Server 16: "; getping $main_singa;
             printf "Server 17: "; getping $main_hk;;
        *) printf "Invalid server number! ($servernumberinput)\n";;
    esac
}

case "$1" in
    -b) block;;
    -block) unblock;;
    --block) block;;
    -u) unblock;;
    -unblock) unblock;;
    --unblock) unblock;;
    -l) cat serverlist.txt;;
    -list) cat serverlist.txt;;
    --list) cat serverlist.txt;;
    -p) pingserver;;
    -ping) pingserver;;
    --ping) pingserver;;
    *) cat manual.txt;;
esac
